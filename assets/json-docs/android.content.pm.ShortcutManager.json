{
  "methods": {
    "addDynamicShortcuts(java.util.List\u003candroid.content.pm.ShortcutInfo\u003e)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "shortcutInfoList"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "addDynamicShortcuts(java.util.List\u003candroid.content.pm.ShortcutInfo\u003e)"
    },
    "createShortcutResultIntent(android.content.pm.ShortcutInfo)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "shortcut"
      ],
      "returnType": "android.content.Intent",
      "exceptions": [],
      "minSdk": 26,
      "name": "createShortcutResultIntent(android.content.pm.ShortcutInfo)"
    },
    "disableShortcuts(java.util.List\u003cjava.lang.String\u003e)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "shortcutIds"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "disableShortcuts(java.util.List\u003cjava.lang.String\u003e)"
    },
    "disableShortcuts(java.util.List\u003cjava.lang.String\u003e,java.lang.CharSequence)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "shortcutIds",
        "unused"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "disableShortcuts(java.util.List\u003cjava.lang.String\u003e,java.lang.CharSequence)"
    },
    "enableShortcuts(java.util.List\u003cjava.lang.String\u003e)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "shortcutIds"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "enableShortcuts(java.util.List\u003cjava.lang.String\u003e)"
    },
    "getDynamicShortcuts()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.util.List\u003candroid.content.pm.ShortcutInfo\u003e",
      "exceptions": [],
      "name": "getDynamicShortcuts()"
    },
    "getIconMaxHeight()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getIconMaxHeight()"
    },
    "getIconMaxWidth()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getIconMaxWidth()"
    },
    "getManifestShortcuts()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.util.List\u003candroid.content.pm.ShortcutInfo\u003e",
      "exceptions": [],
      "name": "getManifestShortcuts()"
    },
    "getMaxShortcutCountPerActivity()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getMaxShortcutCountPerActivity()"
    },
    "getPinnedShortcuts()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.util.List\u003candroid.content.pm.ShortcutInfo\u003e",
      "exceptions": [],
      "name": "getPinnedShortcuts()"
    },
    "getShortcuts(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "matchFlags"
      ],
      "returnType": "java.util.List\u003candroid.content.pm.ShortcutInfo\u003e",
      "exceptions": [],
      "minSdk": 30,
      "name": "getShortcuts(int)",
      "documentation": "In Robolectric, ShadowShortcutManager doesn\u0027t perform any caching so long lived shortcuts are\nreturned on place of shortcuts cached when shown in notifications.\n"
    },
    "isRateLimitingActive()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isRateLimitingActive()"
    },
    "isRequestPinShortcutSupported()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 26,
      "name": "isRequestPinShortcutSupported()"
    },
    "pushDynamicShortcut(android.content.pm.ShortcutInfo)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "shortcut"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 30,
      "name": "pushDynamicShortcut(android.content.pm.ShortcutInfo)",
      "documentation": "In Robolectric, ShadowShortcutManager doesn\u0027t handle rate limiting or shortcut count limits.\nSo, pushDynamicShortcut is similar to {@link #addDynamicShortcuts(List)} but with only one\n{@link ShortcutInfo}.\n"
    },
    "removeAllDynamicShortcuts()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "removeAllDynamicShortcuts()"
    },
    "removeDynamicShortcuts(java.util.List\u003cjava.lang.String\u003e)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "shortcutIds"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "removeDynamicShortcuts(java.util.List\u003cjava.lang.String\u003e)"
    },
    "removeLongLivedShortcuts(java.util.List\u003cjava.lang.String\u003e)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "shortcutIds"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 30,
      "name": "removeLongLivedShortcuts(java.util.List\u003cjava.lang.String\u003e)",
      "documentation": "No-op on Robolectric. The real implementation calls out to a service, which will NPE on\nRobolectric.\n"
    },
    "reportShortcutUsed(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "shortcutId"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "reportShortcutUsed(java.lang.String)"
    },
    "requestPinShortcut(android.content.pm.ShortcutInfo,android.content.IntentSender)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "shortcut",
        "resultIntent"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 26,
      "name": "requestPinShortcut(android.content.pm.ShortcutInfo,android.content.IntentSender)"
    },
    "setDynamicShortcuts(java.util.List\u003candroid.content.pm.ShortcutInfo\u003e)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "shortcutInfoList"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "setDynamicShortcuts(java.util.List\u003candroid.content.pm.ShortcutInfo\u003e)"
    },
    "setIconMaxHeight(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "height"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIconMaxHeight(int)",
      "documentation": "Sets the value returned by {@link #getIconMaxHeight()}. "
    },
    "setIconMaxWidth(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "width"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIconMaxWidth(int)",
      "documentation": "Sets the value returned by {@link #getIconMaxWidth()}. "
    },
    "setIsRequestPinShortcutSupported(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "isRequestPinShortcutSupported"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsRequestPinShortcutSupported(boolean)"
    },
    "setManifestShortcuts(java.util.List\u003candroid.content.pm.ShortcutInfo\u003e)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "manifestShortcuts"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setManifestShortcuts(java.util.List\u003candroid.content.pm.ShortcutInfo\u003e)",
      "documentation": "Sets the value returned by {@link #getManifestShortcuts()}. "
    },
    "setMaxShortcutCountPerActivity(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "value"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setMaxShortcutCountPerActivity(int)",
      "documentation": "Sets the value returned by {@link #getMaxShortcutCountPerActivity()} . "
    },
    "updateShortcuts(java.util.List\u003candroid.content.pm.ShortcutInfo\u003e)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "shortcutInfoList"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "updateShortcuts(java.util.List\u003candroid.content.pm.ShortcutInfo\u003e)"
    }
  },
  "imports": [
    "android.content.pm.ShortcutManager.FLAG_MATCH_CACHED",
    "android.content.pm.ShortcutManager.FLAG_MATCH_DYNAMIC",
    "android.content.pm.ShortcutManager.FLAG_MATCH_MANIFEST",
    "android.content.pm.ShortcutManager.FLAG_MATCH_PINNED",
    "android.os.Build.VERSION_CODES.R",
    "java.util.stream.Collectors.toCollection",
    "android.content.Intent",
    "android.content.IntentSender",
    "android.content.IntentSender.SendIntentException",
    "android.content.pm.ShortcutInfo",
    "android.content.pm.ShortcutManager",
    "android.os.Build",
    "android.os.Build.VERSION_CODES",
    "com.google.common.collect.ImmutableList",
    "com.google.common.collect.Lists",
    "java.util.ArrayList",
    "java.util.Arrays",
    "java.util.HashMap",
    "java.util.HashSet",
    "java.util.List",
    "java.util.Map",
    "java.util.Set",
    "org.robolectric.RuntimeEnvironment",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements"
  ],
  "name": "org.robolectric.shadows.ShadowShortcutManager",
  "documentation": ""
}