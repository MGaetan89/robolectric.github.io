{
  "methods": {
    "doFrame(long,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "frameTimeNanos",
        "frame"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "doFrame(long,int)"
    },
    "getFrameInterval()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "long",
      "exceptions": [],
      "name": "getFrameInterval()",
      "documentation": "Return the current inter-frame interval.\n\n\u003cp\u003eCan only be used in {@link LooperMode.Mode.LEGACY}\n\n@return Inter-frame interval.\n"
    },
    "setFrameInterval(long)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "frameInterval"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setFrameInterval(long)",
      "documentation": "Set the inter-frame interval used to advance the clock. By default, this is set to 1ms.\n\n\u003cp\u003eOnly supported in {@link LooperMode.Mode.LEGACY}\n\n@param frameInterval Inter-frame interval.\n"
    },
    "setPostCallbackDelay(int)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "delayMillis"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPostCallbackDelay(int)",
      "documentation": "Allows application to specify a fixed amount of delay when {@link #postCallback(int, Runnable,\nObject)} is invoked. The default delay value is 0. This can be used to avoid infinite animation\ntasks to be spawned when the Robolectric {@link org.robolectric.util.Scheduler} is in {@link\norg.robolectric.util.Scheduler.IdleState#PAUSED} mode.\n\n\u003cp\u003eOnly supported in {@link LooperMode.Mode.LEGACY}\n"
    },
    "setPostFrameCallbackDelay(int)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "delayMillis"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPostFrameCallbackDelay(int)",
      "documentation": "Allows application to specify a fixed amount of delay when {@link\n#postFrameCallback(FrameCallback)} is invoked. The default delay value is 0. This can be used\nto avoid infinite animation tasks to be spawned when in LooperMode PAUSED or {@link\norg.robolectric.util.Scheduler.IdleState#PAUSED} and displaying an animation.\n"
    }
  },
  "imports": [
    "org.robolectric.shadows.ShadowLooper.looperMode",
    "org.robolectric.util.reflector.Reflector.reflector",
    "android.view.Choreographer",
    "android.view.Choreographer.FrameCallback",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.LooperMode",
    "org.robolectric.annotation.LooperMode.Mode",
    "org.robolectric.annotation.RealObject",
    "org.robolectric.util.PerfStatsCollector",
    "org.robolectric.util.reflector.Accessor",
    "org.robolectric.util.reflector.Direct",
    "org.robolectric.util.reflector.ForType",
    "org.robolectric.util.reflector.Static",
    "org.robolectric.shadows.ShadowChoreographer.Picker",
    "org.robolectric.shadows.ShadowChoreographer.ChoreographerReflector"
  ],
  "name": "org.robolectric.shadows.ShadowChoreographer",
  "documentation": "The shadow API for {@link android.view.Choreographer}.\n\n\u003cp\u003eDifferent shadow implementations will be used depending on the current {@link LooperMode}. See\n{@link ShadowLegacyChoreographer} and {@link ShadowPausedChoreographer} for details.\n"
}