{
  "methods": {
    "__constructor__(android.content.Context,android.content.pm.ICrossProfileApps)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "context",
        "service"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "__constructor__(android.content.Context,android.content.pm.ICrossProfileApps)"
    },
    "addTargetUserProfile(android.os.UserHandle)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "userHandle"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addTargetUserProfile(android.os.UserHandle)",
      "documentation": "Adds {@code userHandle} to the list of accessible handles. "
    },
    "canConfigureInteractAcrossProfiles(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "packageName"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 30,
      "name": "canConfigureInteractAcrossProfiles(java.lang.String)",
      "documentation": "Unlike the real system, we will assume a package can always configure its own cross profile\ninteraction.\n"
    },
    "canInteractAcrossProfiles()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 30,
      "name": "canInteractAcrossProfiles()",
      "documentation": "Checks if the current application can interact across profile.\n\n\u003cp\u003eThis checks for the existence of a target user profile, and if the app has\nINTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL or INTERACT_ACROSS_PROFILES permission.\nImportantly, the {@code interact_across_profiles} AppOps is only checked through the value set\nby {@link #setInteractAcrossProfilesAppOp(int)} or by {@link\n#setInteractAcrossProfilesAppOp(String, int)}, if the application has the needed permissions.\n"
    },
    "canRequestInteractAcrossProfiles()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 30,
      "name": "canRequestInteractAcrossProfiles()",
      "documentation": "Returns whether the calling package can request to navigate the user to the relevant settings\npage to request user consent to interact across profiles.\n\n\u003cp\u003eThis checks for the existence of a target user profile, and if the app has requested the\nINTERACT_ACROSS_PROFILES permission in its manifest. As Robolectric doesn\u0027t interpret the\npermissions in the manifest, whether or not the app has requested this is defined by {@link\n#setHasRequestedInteractAcrossProfiles(boolean)}.\n\n\u003cp\u003eIf the test uses {@link #setInteractAcrossProfilesAppOp(int)}, it implies the app has\nrequested the AppOps.\n\n\u003cp\u003eIn short, compared to {@link #canInteractAcrossProfiles()}, it doesn\u0027t check if the user has\nthe AppOps or not.\n"
    },
    "clearNextStartedActivities()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "clearNextStartedActivities()",
      "documentation": "Clears all records of {@link StartedActivity}s from calls to {@link\nCrossProfileApps#startActivity(ComponentName, UserHandle)} or {@link\nCrossProfileApps#startMainActivity(ComponentName, UserHandle)}.\n"
    },
    "clearTargetUserProfiles()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "clearTargetUserProfiles()",
      "documentation": "Clears the list of accessible handles. "
    },
    "createRequestInteractAcrossProfilesIntent()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.content.Intent",
      "exceptions": [],
      "minSdk": 30,
      "name": "createRequestInteractAcrossProfilesIntent()",
      "documentation": "Returns an intent with the same action as the one returned by system when requesting the same.\n\n\u003cp\u003eNote: Currently, the system will also set the package name as a URI, but as this is not\nspecified in the main doc, we shouldn\u0027t rely on it. The purpose is only to make an intent can\nthat be recognised in a test.\n\n@throws SecurityException if this is called while {@link\n    CrossProfileApps#canRequestInteractAcrossProfiles()} returns false.\n"
    },
    "getNextStartedActivity()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "org.robolectric.shadows.ShadowCrossProfileApps.StartedActivity",
      "exceptions": [],
      "name": "getNextStartedActivity()",
      "documentation": "Consumes the most recent {@link ComponentName}, {@link UserHandle} pair started by {@link\nCrossProfileApps#startMainActivity(ComponentName, UserHandle)} or {@link\nCrossProfileApps#startActivity(ComponentName, UserHandle)}, and returns it wrapped in {@link\nStartedActivity}.\n"
    },
    "getProfileSwitchingIconDrawable(android.os.UserHandle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "userHandle"
      ],
      "returnType": "android.graphics.drawable.Drawable",
      "exceptions": [],
      "name": "getProfileSwitchingIconDrawable(android.os.UserHandle)",
      "documentation": "Returns a {@link Drawable} that can be shown for profile switching, which is guaranteed to\nalways be the same for a particular user and to be distinct between users.\n"
    },
    "getProfileSwitchingLabel(android.os.UserHandle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "userHandle"
      ],
      "returnType": "java.lang.CharSequence",
      "exceptions": [],
      "name": "getProfileSwitchingLabel(android.os.UserHandle)",
      "documentation": "Returns a {@link CharSequence} that can be shown as a label for profile switching, which is\nguaranteed to always be the same for a particular user and to be distinct between users.\n"
    },
    "getTargetUserProfiles()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.util.List\u003candroid.os.UserHandle\u003e",
      "exceptions": [],
      "name": "getTargetUserProfiles()",
      "documentation": "Returns a list of {@link UserHandle}s currently accessible. This list is populated from calls\nto {@link #addTargetUserProfile(UserHandle)}.\n"
    },
    "hasPermission(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "permission"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "hasPermission(java.lang.String)"
    },
    "isRequestInteractAcrossProfilesIntent(android.content.Intent)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "intent"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isRequestInteractAcrossProfilesIntent(android.content.Intent)",
      "documentation": "Checks whether the given intent will redirect toward the screen allowing the user to change the\ninteract across profiles AppOps.\n"
    },
    "peekNextStartedActivity()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "org.robolectric.shadows.ShadowCrossProfileApps.StartedActivity",
      "exceptions": [],
      "name": "peekNextStartedActivity()",
      "documentation": "Returns the most recent {@link ComponentName}, {@link UserHandle} pair started by {@link\nCrossProfileApps#startMainActivity(ComponentName, UserHandle)} or {@link\nCrossProfileApps#startActivity(ComponentName, UserHandle)}, wrapped in {@link StartedActivity}.\n"
    },
    "peekNextStartedMainActivity()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "org.robolectric.shadows.ShadowCrossProfileApps.StartedMainActivity",
      "exceptions": [],
      "name": "peekNextStartedMainActivity()",
      "documentation": "Returns the most recent {@link ComponentName}, {@link UserHandle} pair started by {@link\nCrossProfileApps#startMainActivity(ComponentName, UserHandle)}, wrapped in {@link\nStartedMainActivity}.\n\n@deprecated Use {@link #peekNextStartedActivity()} instead.\n"
    },
    "removeTargetUserProfile(android.os.UserHandle)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "userHandle"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "removeTargetUserProfile(android.os.UserHandle)",
      "documentation": "Removes {@code userHandle} from the list of accessible handles, if present. "
    },
    "setHasRequestedInteractAcrossProfiles(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "value"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setHasRequestedInteractAcrossProfiles(boolean)",
      "documentation": "Sets whether or not the current application has requested the interact across profile\npermission in its manifest.\n"
    },
    "setInteractAcrossProfilesAppOp(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "newMode"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setInteractAcrossProfilesAppOp(int)",
      "documentation": "Forces the {code interact_across_profile} AppOps for the current package.\n\n\u003cp\u003eIf the value changes, this also sends the {@link\nCrossProfileApps#ACTION_CAN_INTERACT_ACROSS_PROFILES_CHANGED} broadcast.\n"
    },
    "setInteractAcrossProfilesAppOp(java.lang.String,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "packageName",
        "newMode"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 30,
      "name": "setInteractAcrossProfilesAppOp(java.lang.String,int)",
      "documentation": "Checks permission and changes the AppOps value stored in {@link ShadowCrossProfileApps}.\n\n\u003cp\u003eIn the real implementation, if there is no target profile, the AppOps is not changed, as it\nwill be set during the profile\u0027s initialization. The real implementation also really changes\nthe AppOps for all profiles the package is installed in.\n"
    },
    "startActivity(android.content.ComponentName,android.os.UserHandle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "componentName",
        "targetUser"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 29,
      "name": "startActivity(android.content.ComponentName,android.os.UserHandle)",
      "documentation": "Simulates starting the activity specified in the specified profile, performing the same\nsecurity checks done by the real {@link CrossProfileApps}.\n\n\u003cp\u003eThe most recent main activity started can be queried by {@link #peekNextStartedActivity()}\n()}.\n"
    },
    "startMainActivity(android.content.ComponentName,android.os.UserHandle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "componentName",
        "targetUser"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "startMainActivity(android.content.ComponentName,android.os.UserHandle)",
      "documentation": "Simulates starting the main activity specified in the specified profile, performing the same\nsecurity checks done by the real {@link CrossProfileApps}.\n\n\u003cp\u003eThe most recent main activity started can be queried by {@link #peekNextStartedActivity()}\n()}.\n"
    },
    "verifyActivityInManifest(android.content.ComponentName,boolean)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "component",
        "requireMainActivity"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "verifyActivityInManifest(android.content.ComponentName,boolean)",
      "documentation": "Ensures that {@code component} is present in the manifest as an exported and enabled activity.\nThis check and the error thrown are the same as the check done by the real {@link\nCrossProfileApps}.\n\n\u003cp\u003eIf {@code requireMainActivity} is true, then this also asserts that the activity is a\nlauncher activity.\n"
    },
    "verifyCanAccessUser(android.os.UserHandle)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "userHandle"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "verifyCanAccessUser(android.os.UserHandle)"
    },
    "verifyHasInteractAcrossProfilesPermission()": {
      "isImplementation": false,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "verifyHasInteractAcrossProfilesPermission()",
      "documentation": "Ensure the current package has the permission to interact across profiles.\n"
    }
  },
  "imports": [
    "android.content.pm.PackageManager.MATCH_DIRECT_BOOT_AWARE",
    "android.content.pm.PackageManager.MATCH_DIRECT_BOOT_UNAWARE",
    "android.os.Build.VERSION_CODES.P",
    "android.os.Build.VERSION_CODES.Q",
    "android.os.Build.VERSION_CODES.R",
    "com.google.common.base.Preconditions.checkNotNull",
    "android.Manifest.permission",
    "android.annotation.RequiresPermission",
    "android.annotation.SystemApi",
    "android.app.AppOpsManager",
    "android.app.AppOpsManager.Mode",
    "android.content.ComponentName",
    "android.content.Context",
    "android.content.Intent",
    "android.content.pm.ActivityInfo",
    "android.content.pm.CrossProfileApps",
    "android.content.pm.ICrossProfileApps",
    "android.content.pm.PackageManager",
    "android.graphics.drawable.ColorDrawable",
    "android.graphics.drawable.Drawable",
    "android.os.Process",
    "android.os.UserHandle",
    "android.provider.Settings",
    "android.text.TextUtils",
    "com.google.common.collect.ImmutableList",
    "com.google.common.collect.Iterables",
    "java.util.ArrayList",
    "java.util.Collections",
    "java.util.LinkedHashSet",
    "java.util.List",
    "java.util.Objects",
    "java.util.Set",
    "javax.annotation.Nullable",
    "org.robolectric.RuntimeEnvironment",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.shadows.ShadowCrossProfileApps.StartedMainActivity",
    "org.robolectric.shadows.ShadowCrossProfileApps.StartedActivity"
  ],
  "name": "org.robolectric.shadows.ShadowCrossProfileApps",
  "documentation": "Robolectric implementation of {@link CrossProfileApps}. "
}