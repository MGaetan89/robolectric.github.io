{
  "methods": {
    "getNext()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "android.os.Message",
      "exceptions": [],
      "name": "getNext()",
      "documentation": "Convenience method to provide getter access to the private field {@code Message.next}.\n\n\u003cp\u003eOnly supported in {@link LooperMode.Mode.LEGACY}\n\n@return The next message in the current message chain.\n@see #setNext(Message)\n"
    },
    "recycleUnchecked()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "recycleUnchecked()",
      "documentation": "Exposes the package-private {@link Message#recycleUnchecked()} "
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()",
      "documentation": "Resets the static state of the {@link Message} class by\nemptying the message pool.\n"
    },
    "setNext(android.os.Message)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [
        "next"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setNext(android.os.Message)",
      "documentation": "Convenience method to provide setter access to the private field {@code Message.next}.\n\n\u003cp\u003eOnly supported in {@link LooperMode.Mode.LEGACY}\n\n@param next the new next message for the current message.\n@see #getNext()\n"
    },
    "setScheduledRunnable(java.lang.Runnable)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [
        "r"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setScheduledRunnable(java.lang.Runnable)",
      "documentation": "Stores the {@link Runnable} instance that has been scheduled to invoke this message. This is\ncalled when the message is enqueued by {@link ShadowLegacyMessageQueue#enqueueMessage} and is\nused when the message is recycled to ensure that the correct {@link Runnable} instance is\nremoved from the associated scheduler.\n\n@param r the {@link Runnable} instance that is scheduled to trigger this message.\n    \u003cp\u003e#if ($api \u003e\u003d 21) * @see #recycleUnchecked() #else * @see #recycle() #end\n    \u003cp\u003eOnly supported in {@link LooperMode.Mode.LEGACY}.\n"
    }
  },
  "imports": [
    "org.robolectric.util.reflector.Reflector.reflector",
    "android.os.Message",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.LooperMode",
    "org.robolectric.annotation.Resetter",
    "org.robolectric.util.reflector.Accessor",
    "org.robolectric.util.reflector.ForType",
    "org.robolectric.util.reflector.Static",
    "org.robolectric.shadows.ShadowMessage.Picker",
    "org.robolectric.shadows.ShadowMessage.ReflectorMessage"
  ],
  "name": "org.robolectric.shadows.ShadowMessage",
  "documentation": "The shadow API for {@link android.os.Message}.\n\n\u003cp\u003eDifferent shadow implementations will be used depending on the current {@link LooperMode}. See\n{@link ShadowLegacyMessage} and {@link ShadowPausedMessage} for details.\n"
}