{
  "methods": {
    "__constructor__(android.content.Context,android.util.AttributeSet)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "context",
        "attributeSet"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "__constructor__(android.content.Context,android.util.AttributeSet)"
    },
    "__constructor__(android.content.Context,android.util.AttributeSet,int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "context",
        "attributeSet",
        "defStyle"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "__constructor__(android.content.Context,android.util.AttributeSet,int)"
    },
    "canCoverCenter()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "canCoverCenter()"
    },
    "dispatchTouchEvent(android.view.MotionEvent)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "event"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "dispatchTouchEvent(android.view.MotionEvent)"
    },
    "fromE6(int)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "i"
      ],
      "returnType": "double",
      "exceptions": [],
      "name": "fromE6(int)"
    },
    "getController()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "com.google.android.maps.MapController",
      "exceptions": [],
      "name": "getController()"
    },
    "getLatitudeSpan()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getLatitudeSpan()"
    },
    "getLongitudeSpan()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getLongitudeSpan()"
    },
    "getMapCenter()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "com.google.android.maps.GeoPoint",
      "exceptions": [],
      "name": "getMapCenter()"
    },
    "getOverlays()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.util.List\u003ccom.google.android.maps.Overlay\u003e",
      "exceptions": [],
      "name": "getOverlays()"
    },
    "getProjection()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "com.google.android.maps.Projection",
      "exceptions": [],
      "name": "getProjection()"
    },
    "getUseBuiltInZoomMapControls()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "getUseBuiltInZoomMapControls()",
      "documentation": "@return whether to use built in zoom map controls\n"
    },
    "getZoomButtonsController()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.widget.ZoomButtonsController",
      "exceptions": [],
      "name": "getZoomButtonsController()"
    },
    "getZoomLevel()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getZoomLevel()"
    },
    "isOpaque()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isOpaque()"
    },
    "isSatellite()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isSatellite()"
    },
    "moveByPixels(int,int)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "x",
        "y"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "moveByPixels(int,int)"
    },
    "onLayout(boolean,int,int,int,int)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "b",
        "i",
        "i1",
        "i2",
        "i3"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "onLayout(boolean,int,int,int,int)"
    },
    "onSizeChanged(int,int,int,int)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "newWidth",
        "newHeight",
        "oldWidth",
        "oldHeight"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "onSizeChanged(int,int,int,int)"
    },
    "onTouchEvent(android.view.MotionEvent)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "event"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "onTouchEvent(android.view.MotionEvent)"
    },
    "preLoad()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "preLoad()"
    },
    "preLoadWasCalled()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "preLoadWasCalled()",
      "documentation": "@return whether {@link #preLoad()} has been called on this {@code MapView}\n"
    },
    "scaleDegree(int,int,int,int,int)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "degree",
        "minPixel",
        "maxPixel",
        "centerDegree",
        "spanDegrees"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "scaleDegree(int,int,int,int,int)"
    },
    "scalePixel(int,int,int,int,int)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "pixel",
        "minPixel",
        "maxPixel",
        "centerDegree",
        "spanDegrees"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "scalePixel(int,int,int,int,int)"
    },
    "setBuiltInZoomControls(boolean)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "useBuiltInZoomMapControls"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setBuiltInZoomControls(boolean)"
    },
    "setCanCoverCenter(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "canCoverCenter"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setCanCoverCenter(boolean)",
      "documentation": "Controls the value to be returned by {@link #canCoverCenter()}\n\n@param canCoverCenter the value to be returned by {@link #canCoverCenter()}\n"
    },
    "setContextOnRealView(android.content.Context)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "context"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setContextOnRealView(android.content.Context)"
    },
    "setLatitudeSpan(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "latitudeSpan"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setLatitudeSpan(int)",
      "documentation": "Sets the latitude span (the absolute value of the difference between the Northernmost and\nSouthernmost latitudes visible on the map) of this {@code MapView}\n\n@param latitudeSpan the new latitude span for this {@code MapView}\n"
    },
    "setLongitudeSpan(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "longitudeSpan"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setLongitudeSpan(int)",
      "documentation": "Sets the longitude span (the absolute value of the difference between the Easternmost and\nWesternmost longitude visible on the map) of this {@code MapView}\n\n@param longitudeSpan the new latitude span for this {@code MapView}\n"
    },
    "setSatellite(boolean)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "satelliteOn"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setSatellite(boolean)"
    },
    "toE6(double)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "d"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "toE6(double)"
    }
  },
  "imports": [
    "android.content.Context",
    "android.graphics.Point",
    "android.util.AttributeSet",
    "android.view.MotionEvent",
    "android.view.View",
    "android.view.ViewGroup",
    "android.widget.ZoomButtonsController",
    "com.google.android.maps.GeoPoint",
    "com.google.android.maps.MapController",
    "com.google.android.maps.MapView",
    "com.google.android.maps.Overlay",
    "com.google.android.maps.Projection",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.RealObject",
    "org.robolectric.shadow.api.Shadow",
    "org.robolectric.shadows.ShadowViewGroup",
    "org.robolectric.util.ReflectionHelpers",
    "java.util.ArrayList",
    "java.util.List",
    "org.robolectric.shadow.api.Shadow.directlyOn",
    "org.robolectric.shadow.api.Shadow.invokeConstructor",
    "org.robolectric.shadows.maps.Shadows.shadowOf",
    "org.robolectric.util.ReflectionHelpers.ClassParameter"
  ],
  "name": "org.robolectric.shadows.maps.ShadowMapView"
}